// Generated by CoffeeScript 1.3.3
(function() {
  var Country, async, freebase, sourceParser, sourceRequest, storage;

  async = require("async");

  sourceRequest = require("./SourceRequest/sourceRequest");

  sourceParser = require("./SourceParser/sourceParser");

  freebase = require("./Freebase/freebase");

  storage = require("./Storage/storage");

  Country = (function() {

    function Country() {}

    /*
      iso - iso data request structure {req : request}
      iso_parse - iso parse structure {parser : sourceParser, fields : {code : int, name : int}}
      fields.code, fields.name - indexes of respective columns
      store - storage  access structure {uri : uri, collection : string, type : "mongo"}
      storage result structure : {_id : iso.code, name : iso.name, fullName, alias : [freebase.alias]}
    */


    Country.prototype.populateStorage = function(iso, iso_parse, store, onDone) {
      var _this = this;
      return async.waterfall([
        function(ck) {
          return sourceRequest.get(iso.type).request(iso, ck);
        }, function(source, ck) {
          return _this._compile(iso_parse, source, ck);
        }, function(countries, ck) {
          return _this._write(store, countries, ck);
        }
      ], onDone);
    };

    Country.prototype._compile = function(iso_parse, source, onDone) {
      var columns, countries, r, _i, _len;
      columns = sourceParser.get(iso_parse.parser.type).parse(iso_parse.parser, source);
      countries = [];
      for (_i = 0, _len = columns.length; _i < _len; _i++) {
        r = columns[_i];
        countries.push({
          _id: r[iso_parse.fields.code],
          name: r[iso_parse.fields.name]
        });
      }
      return freebase.getCountries(countries.map(function(m) {
        return m.name;
      }), function(err, freebaseCountries) {
        var c, fc, _j, _len1;
        if (!err) {
          for (_j = 0, _len1 = countries.length; _j < _len1; _j++) {
            c = countries[_j];
            fc = freebaseCountries.filter(function(f) {
              return f.name.toLowerCase() === c.name;
            })[0];
            if (fc) {
              c.alias = fc.alias;
            }
          }
        }
        return onDone(err, countries);
      });
    };

    Country.prototype._write = function(store, countries, onDone) {
      var stg;
      stg = storage.get(store.type);
      return async.waterfall([
        function(ck) {
          return stg.open(store, ck);
        }, function(ck) {
          return async.forEach(countries, (function(c, cb) {
            return stg.insert(c, cb);
          }), ck);
        }
      ], function(err) {
        stg.close();
        return onDone(err);
      });
    };

    return Country;

  })();

  exports.Country = Country;

}).call(this);
